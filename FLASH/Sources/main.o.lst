   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	t,4,4
  18              		.comm	Delta,4,4
  19              		.global	i
  20              		.section	.bss.i,"aw",%nobits
  21              		.align	2
  24              	i:
  25 0000 00000000 		.space	4
  26              		.comm	LineScanTemp,256,4
  27              		.comm	LSarray,256,4
  28              		.comm	LSavg,2,2
  29              		.comm	Ledge,2,2
  30              		.comm	Redge,2,2
  31              		.comm	Center,2,2
  32              		.comm	GoodRedge,2,2
  33              		.comm	GoodLedge,2,2
  34              		.comm	TmpLSavg,4,4
  35              		.section	.rodata
  36              		.align	2
  37              	.LC4:
  38 0000 0D0A00   		.ascii	"\015\012\000"
  39 0003 00       		.align	2
  40              	.LC6:
  41 0004 4C3A00   		.ascii	"L:\000"
  42 0007 00       		.align	2
  43              	.LC10:
  44 0008 25582C00 		.ascii	"%X,\000"
  45              		.align	2
  46              	.LC13:
  47 000c 255800   		.ascii	"%X\000"
  48 000f 00       		.align	2
  49              	.LC15:
  50 0010 2C00     		.ascii	",\000"
  51 0012 0000     		.section	.text.demo,"ax",%progbits
  52              		.align	2
  53              		.global	demo
  54              		.code	16
  55              		.thumb_func
  57              	demo:
  58              	.LFB0:
  59              		.file 1 "../Sources/main.c"
   1:../Sources/main.c **** #include "derivative.h" /* include peripheral declarations */
   2:../Sources/main.c **** #include "TFC\TFC.h"
   3:../Sources/main.c **** #include "cup_car.h"
   4:../Sources/main.c **** 
   5:../Sources/main.c **** uint32_t t, Delta, i=0;
   6:../Sources/main.c **** uint16_t  LineScanTemp[128],LSarray[128], LSavg, Ledge, Redge, Center, GoodRedge, GoodLedge;
   7:../Sources/main.c **** float	TmpLSavg;
   8:../Sources/main.c **** 
   9:../Sources/main.c **** void demo()
  10:../Sources/main.c **** {
  60              		.loc 1 10 0
  61              		.cfi_startproc
  62 0000 98B5     		push	{r3, r4, r7, lr}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 16
  65              		.cfi_offset 3, -16
  66              		.cfi_offset 4, -12
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 00AF     		add	r7, sp, #0
  70              	.LCFI1:
  71              		.cfi_def_cfa_register 7
  11:../Sources/main.c **** 	//This Demo program will look at the middle 2 switch to select one of 4 demo modes.
  12:../Sources/main.c **** 	//Let's look at the middle 2 switches
  13:../Sources/main.c **** 	switch((TFC_GetDIP_Switch()>>1)&0x03)
  72              		.loc 1 13 0
  73 0004 FFF7FEFF 		bl	TFC_GetDIP_Switch
  74 0008 031C     		mov	r3, r0
  75 000a 5B08     		lsr	r3, r3, #1
  76 000c DBB2     		uxtb	r3, r3
  77 000e 1A1C     		mov	r2, r3
  78 0010 0323     		mov	r3, #3
  79 0012 1340     		and	r3, r2
  80 0014 012B     		cmp	r3, #1
  81 0016 49D0     		beq	.L4
  82 0018 02DC     		bgt	.L7
  83 001a 002B     		cmp	r3, #0
  84 001c 07D0     		beq	.L3
  85 001e 3AE1     		b	.L1
  86              	.L7:
  87 0020 022B     		cmp	r3, #2
  88 0022 00D1     		bne	.LCB32
  89 0024 7DE0     		b	.L5	@long jump
  90              	.LCB32:
  91 0026 032B     		cmp	r3, #3
  92 0028 00D1     		bne	.LCB34
  93 002a A5E0     		b	.L6	@long jump
  94              	.LCB34:
  95 002c 33E1     		b	.L1
  96              	.L3:
  14:../Sources/main.c **** 	{
  15:../Sources/main.c **** 		case 0 :
  16:../Sources/main.c **** 		//Demo mode 0 just tests the switches and LED's
  17:../Sources/main.c **** 		if(TFC_PUSH_BUTTON_0_PRESSED)
  97              		.loc 1 17 0
  98 002e 9B4B     		ldr	r3, .L32
  99 0030 1A69     		ldr	r2, [r3, #16]
 100 0032 8023     		mov	r3, #128
 101 0034 9B01     		lsl	r3, r3, #6
 102 0036 1340     		and	r3, r2
 103 0038 04D0     		beq	.L8
  18:../Sources/main.c **** 			TFC_BAT_LED0_ON;
 104              		.loc 1 18 0
 105 003a 994B     		ldr	r3, .L32+4
 106 003c 8022     		mov	r2, #128
 107 003e 5200     		lsl	r2, r2, #1
 108 0040 5A60     		str	r2, [r3, #4]
 109 0042 03E0     		b	.L9
 110              	.L8:
  19:../Sources/main.c **** 		else
  20:../Sources/main.c **** 			TFC_BAT_LED0_OFF;
 111              		.loc 1 20 0
 112 0044 964B     		ldr	r3, .L32+4
 113 0046 8022     		mov	r2, #128
 114 0048 5200     		lsl	r2, r2, #1
 115 004a 9A60     		str	r2, [r3, #8]
 116              	.L9:
  21:../Sources/main.c **** 		
  22:../Sources/main.c **** 		if(TFC_PUSH_BUTTON_1_PRESSED)
 117              		.loc 1 22 0
 118 004c 934B     		ldr	r3, .L32
 119 004e 1A69     		ldr	r2, [r3, #16]
 120 0050 8023     		mov	r3, #128
 121 0052 9B02     		lsl	r3, r3, #10
 122 0054 1340     		and	r3, r2
 123 0056 04D0     		beq	.L10
  23:../Sources/main.c **** 			TFC_BAT_LED3_ON;
 124              		.loc 1 23 0
 125 0058 914B     		ldr	r3, .L32+4
 126 005a 8022     		mov	r2, #128
 127 005c 1201     		lsl	r2, r2, #4
 128 005e 5A60     		str	r2, [r3, #4]
 129 0060 03E0     		b	.L11
 130              	.L10:
  24:../Sources/main.c **** 		else
  25:../Sources/main.c **** 			TFC_BAT_LED3_OFF;
 131              		.loc 1 25 0
 132 0062 8F4B     		ldr	r3, .L32+4
 133 0064 8022     		mov	r2, #128
 134 0066 1201     		lsl	r2, r2, #4
 135 0068 9A60     		str	r2, [r3, #8]
 136              	.L11:
  26:../Sources/main.c **** 		
  27:../Sources/main.c **** 		
  28:../Sources/main.c **** 		if(TFC_GetDIP_Switch()&0x01)
 137              		.loc 1 28 0
 138 006a FFF7FEFF 		bl	TFC_GetDIP_Switch
 139 006e 031C     		mov	r3, r0
 140 0070 1A1C     		mov	r2, r3
 141 0072 0123     		mov	r3, #1
 142 0074 1340     		and	r3, r2
 143 0076 04D0     		beq	.L12
  29:../Sources/main.c **** 			TFC_BAT_LED1_ON;
 144              		.loc 1 29 0
 145 0078 894B     		ldr	r3, .L32+4
 146 007a 8022     		mov	r2, #128
 147 007c 9200     		lsl	r2, r2, #2
 148 007e 5A60     		str	r2, [r3, #4]
 149 0080 03E0     		b	.L13
 150              	.L12:
  30:../Sources/main.c **** 		else
  31:../Sources/main.c **** 			TFC_BAT_LED1_OFF;
 151              		.loc 1 31 0
 152 0082 874B     		ldr	r3, .L32+4
 153 0084 8022     		mov	r2, #128
 154 0086 9200     		lsl	r2, r2, #2
 155 0088 9A60     		str	r2, [r3, #8]
 156              	.L13:
  32:../Sources/main.c **** 		
  33:../Sources/main.c **** 		if(TFC_GetDIP_Switch()&0x08)
 157              		.loc 1 33 0
 158 008a FFF7FEFF 		bl	TFC_GetDIP_Switch
 159 008e 031C     		mov	r3, r0
 160 0090 1A1C     		mov	r2, r3
 161 0092 0823     		mov	r3, #8
 162 0094 1340     		and	r3, r2
 163 0096 04D0     		beq	.L14
  34:../Sources/main.c **** 			TFC_BAT_LED2_ON;
 164              		.loc 1 34 0
 165 0098 814B     		ldr	r3, .L32+4
 166 009a 8022     		mov	r2, #128
 167 009c D200     		lsl	r2, r2, #3
 168 009e 5A60     		str	r2, [r3, #4]
  35:../Sources/main.c **** 		else
  36:../Sources/main.c **** 			TFC_BAT_LED2_OFF;
  37:../Sources/main.c **** 		
  38:../Sources/main.c **** 		break;
 169              		.loc 1 38 0
 170 00a0 F9E0     		b	.L1
 171              	.L14:
  36:../Sources/main.c **** 			TFC_BAT_LED2_OFF;
 172              		.loc 1 36 0
 173 00a2 7F4B     		ldr	r3, .L32+4
 174 00a4 8022     		mov	r2, #128
 175 00a6 D200     		lsl	r2, r2, #3
 176 00a8 9A60     		str	r2, [r3, #8]
 177              		.loc 1 38 0
 178 00aa F4E0     		b	.L1
 179              	.L4:
  39:../Sources/main.c **** 			
  40:../Sources/main.c **** 		case 1:
  41:../Sources/main.c **** 		
  42:../Sources/main.c **** 		//Demo mode 1 will just move the servos with the on-board potentiometers
  43:../Sources/main.c **** 		if(TFC_Ticker[0]>=20)
 180              		.loc 1 43 0
 181 00ac 7D4B     		ldr	r3, .L32+8
 182 00ae 1B68     		ldr	r3, [r3]
 183 00b0 132B     		cmp	r3, #19
 184 00b2 12D9     		bls	.L16
  44:../Sources/main.c **** 		{
  45:../Sources/main.c **** 			TFC_Ticker[0] = 0; //reset the Ticker
 185              		.loc 1 45 0
 186 00b4 7B4B     		ldr	r3, .L32+8
 187 00b6 0022     		mov	r2, #0
 188 00b8 1A60     		str	r2, [r3]
  46:../Sources/main.c **** 			//Every 20 mSeconds, update the Servos
  47:../Sources/main.c **** 			TFC_SetServo(0,TFC_ReadPot(0));
 189              		.loc 1 47 0
 190 00ba 0020     		mov	r0, #0
 191 00bc FFF7FEFF 		bl	TFC_ReadPot
 192 00c0 031C     		add	r3, r0, #0
 193 00c2 0020     		mov	r0, #0
 194 00c4 191C     		add	r1, r3, #0
 195 00c6 FFF7FEFF 		bl	TFC_SetServo
  48:../Sources/main.c **** 			TFC_SetServo(1,TFC_ReadPot(1));
 196              		.loc 1 48 0
 197 00ca 0120     		mov	r0, #1
 198 00cc FFF7FEFF 		bl	TFC_ReadPot
 199 00d0 031C     		add	r3, r0, #0
 200 00d2 0120     		mov	r0, #1
 201 00d4 191C     		add	r1, r3, #0
 202 00d6 FFF7FEFF 		bl	TFC_SetServo
 203              	.L16:
  49:../Sources/main.c **** 		}
  50:../Sources/main.c **** 		//Let's put a pattern on the LEDs
  51:../Sources/main.c **** 		if(TFC_Ticker[1] >= 125)
 204              		.loc 1 51 0
 205 00da 724B     		ldr	r3, .L32+8
 206 00dc 5B68     		ldr	r3, [r3, #4]
 207 00de 7C2B     		cmp	r3, #124
 208 00e0 14D9     		bls	.L17
  52:../Sources/main.c **** 		{
  53:../Sources/main.c **** 			TFC_Ticker[1] = 0;
 209              		.loc 1 53 0
 210 00e2 704B     		ldr	r3, .L32+8
 211 00e4 0022     		mov	r2, #0
 212 00e6 5A60     		str	r2, [r3, #4]
  54:../Sources/main.c **** 			t++;
 213              		.loc 1 54 0
 214 00e8 6F4B     		ldr	r3, .L32+12
 215 00ea 1B68     		ldr	r3, [r3]
 216 00ec 5A1C     		add	r2, r3, #1
 217 00ee 6E4B     		ldr	r3, .L32+12
 218 00f0 1A60     		str	r2, [r3]
  55:../Sources/main.c **** 			if(t>4)
 219              		.loc 1 55 0
 220 00f2 6D4B     		ldr	r3, .L32+12
 221 00f4 1B68     		ldr	r3, [r3]
 222 00f6 042B     		cmp	r3, #4
 223 00f8 02D9     		bls	.L18
  56:../Sources/main.c **** 			{
  57:../Sources/main.c **** 				t=0;
 224              		.loc 1 57 0
 225 00fa 6B4B     		ldr	r3, .L32+12
 226 00fc 0022     		mov	r2, #0
 227 00fe 1A60     		str	r2, [r3]
 228              	.L18:
  58:../Sources/main.c **** 			}			
  59:../Sources/main.c **** 			TFC_SetBatteryLED_Level(t);
 229              		.loc 1 59 0
 230 0100 694B     		ldr	r3, .L32+12
 231 0102 1B68     		ldr	r3, [r3]
 232 0104 DBB2     		uxtb	r3, r3
 233 0106 181C     		mov	r0, r3
 234 0108 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 235              	.L17:
  60:../Sources/main.c **** 		}
  61:../Sources/main.c **** 		
  62:../Sources/main.c **** 		TFC_SetMotorPWM(0,0); //Make sure motors are off
 236              		.loc 1 62 0
 237 010c 0022     		mov	r2, #0
 238 010e 0023     		mov	r3, #0
 239 0110 101C     		add	r0, r2, #0
 240 0112 191C     		add	r1, r3, #0
 241 0114 FFF7FEFF 		bl	TFC_SetMotorPWM
  63:../Sources/main.c **** 		TFC_HBRIDGE_DISABLE;
 242              		.loc 1 63 0
 243 0118 644B     		ldr	r3, .L32+16
 244 011a 8022     		mov	r2, #128
 245 011c 9203     		lsl	r2, r2, #14
 246 011e 9A60     		str	r2, [r3, #8]
  64:../Sources/main.c **** 		
  65:../Sources/main.c **** 		
  66:../Sources/main.c **** 		break;
 247              		.loc 1 66 0
 248 0120 B9E0     		b	.L1
 249              	.L5:
  67:../Sources/main.c **** 		
  68:../Sources/main.c **** 		case 2 :
  69:../Sources/main.c **** 		
  70:../Sources/main.c **** 		//Demo Mode 2 will use the Pots to make the motors move
  71:../Sources/main.c **** 		TFC_HBRIDGE_ENABLE;
 250              		.loc 1 71 0
 251 0122 624B     		ldr	r3, .L32+16
 252 0124 8022     		mov	r2, #128
 253 0126 9203     		lsl	r2, r2, #14
 254 0128 5A60     		str	r2, [r3, #4]
  72:../Sources/main.c **** 		TFC_SetMotorPWM(TFC_ReadPot(0),TFC_ReadPot(1));
 255              		.loc 1 72 0
 256 012a 0020     		mov	r0, #0
 257 012c FFF7FEFF 		bl	TFC_ReadPot
 258 0130 041C     		add	r4, r0, #0
 259 0132 0120     		mov	r0, #1
 260 0134 FFF7FEFF 		bl	TFC_ReadPot
 261 0138 031C     		add	r3, r0, #0
 262 013a 201C     		add	r0, r4, #0
 263 013c 191C     		add	r1, r3, #0
 264 013e FFF7FEFF 		bl	TFC_SetMotorPWM
  73:../Sources/main.c **** 				
  74:../Sources/main.c **** 		//Let's put a pattern on the LEDs
  75:../Sources/main.c **** 		if(TFC_Ticker[1] >= 125)
 265              		.loc 1 75 0
 266 0142 584B     		ldr	r3, .L32+8
 267 0144 5B68     		ldr	r3, [r3, #4]
 268 0146 7C2B     		cmp	r3, #124
 269 0148 00D8     		bhi	.LCB203
 270 014a A1E0     		b	.L30	@long jump
 271              	.LCB203:
  76:../Sources/main.c **** 			{
  77:../Sources/main.c **** 				TFC_Ticker[1] = 0;
 272              		.loc 1 77 0
 273 014c 554B     		ldr	r3, .L32+8
 274 014e 0022     		mov	r2, #0
 275 0150 5A60     		str	r2, [r3, #4]
  78:../Sources/main.c **** 					t++;
 276              		.loc 1 78 0
 277 0152 554B     		ldr	r3, .L32+12
 278 0154 1B68     		ldr	r3, [r3]
 279 0156 5A1C     		add	r2, r3, #1
 280 0158 534B     		ldr	r3, .L32+12
 281 015a 1A60     		str	r2, [r3]
  79:../Sources/main.c **** 					if(t>4)
 282              		.loc 1 79 0
 283 015c 524B     		ldr	r3, .L32+12
 284 015e 1B68     		ldr	r3, [r3]
 285 0160 042B     		cmp	r3, #4
 286 0162 02D9     		bls	.L20
  80:../Sources/main.c **** 					{
  81:../Sources/main.c **** 						t=0;
 287              		.loc 1 81 0
 288 0164 504B     		ldr	r3, .L32+12
 289 0166 0022     		mov	r2, #0
 290 0168 1A60     		str	r2, [r3]
 291              	.L20:
  82:../Sources/main.c **** 					}			
  83:../Sources/main.c **** 				TFC_SetBatteryLED_Level(t);
 292              		.loc 1 83 0
 293 016a 4F4B     		ldr	r3, .L32+12
 294 016c 1B68     		ldr	r3, [r3]
 295 016e DBB2     		uxtb	r3, r3
 296 0170 181C     		mov	r0, r3
 297 0172 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
  84:../Sources/main.c **** 			}
  85:../Sources/main.c **** 		break;
 298              		.loc 1 85 0
 299 0176 8BE0     		b	.L30
 300              	.L6:
  86:../Sources/main.c **** 		
  87:../Sources/main.c **** 		case 3 :
  88:../Sources/main.c **** 					
  89:../Sources/main.c **** 		//Demo Mode 3 will be in Freescale Garage Mode.  It will beam data from the Camera to the 
  90:../Sources/main.c **** 		//Labview Application
  91:../Sources/main.c **** 		
  92:../Sources/main.c **** 
  93:../Sources/main.c **** 		if(TFC_Ticker[0]>100 && LineScanImageReady==1)
 301              		.loc 1 93 0
 302 0178 4A4B     		ldr	r3, .L32+8
 303 017a 1B68     		ldr	r3, [r3]
 304 017c 642B     		cmp	r3, #100
 305 017e 00D8     		bhi	.LCB233
 306 0180 88E0     		b	.L31	@long jump
 307              	.LCB233:
 308              		.loc 1 93 0 is_stmt 0
 309 0182 4B4B     		ldr	r3, .L32+20
 310 0184 1B78     		ldrb	r3, [r3]
 311 0186 DBB2     		uxtb	r3, r3
 312 0188 012B     		cmp	r3, #1
 313 018a 00D0     		beq	.LCB238
 314 018c 82E0     		b	.L31	@long jump
 315              	.LCB238:
  94:../Sources/main.c **** 		{
  95:../Sources/main.c **** 			TFC_Ticker[0] = 0;
 316              		.loc 1 95 0 is_stmt 1
 317 018e 454B     		ldr	r3, .L32+8
 318 0190 0022     		mov	r2, #0
 319 0192 1A60     		str	r2, [r3]
  96:../Sources/main.c **** 			LineScanImageReady=0;
 320              		.loc 1 96 0
 321 0194 464B     		ldr	r3, .L32+20
 322 0196 0022     		mov	r2, #0
 323 0198 1A70     		strb	r2, [r3]
  97:../Sources/main.c **** 			TERMINAL_PRINTF("\r\n");
 324              		.loc 1 97 0
 325 019a 464A     		ldr	r2, .L32+24
 326 019c 464B     		ldr	r3, .L32+28
 327 019e 101C     		mov	r0, r2
 328 01a0 191C     		mov	r1, r3
 329 01a2 FFF7FEFF 		bl	Qprintf
  98:../Sources/main.c **** 			TERMINAL_PRINTF("L:");
 330              		.loc 1 98 0
 331 01a6 434A     		ldr	r2, .L32+24
 332 01a8 444B     		ldr	r3, .L32+32
 333 01aa 101C     		mov	r0, r2
 334 01ac 191C     		mov	r1, r3
 335 01ae FFF7FEFF 		bl	Qprintf
  99:../Sources/main.c **** 			
 100:../Sources/main.c **** 			if(t==0)
 336              		.loc 1 100 0
 337 01b2 3D4B     		ldr	r3, .L32+12
 338 01b4 1B68     		ldr	r3, [r3]
 339 01b6 002B     		cmp	r3, #0
 340 01b8 03D1     		bne	.L22
 101:../Sources/main.c **** 				t=3;
 341              		.loc 1 101 0
 342 01ba 3B4B     		ldr	r3, .L32+12
 343 01bc 0322     		mov	r2, #3
 344 01be 1A60     		str	r2, [r3]
 345 01c0 04E0     		b	.L23
 346              	.L22:
 102:../Sources/main.c **** 			else
 103:../Sources/main.c **** 				t--;
 347              		.loc 1 103 0
 348 01c2 394B     		ldr	r3, .L32+12
 349 01c4 1B68     		ldr	r3, [r3]
 350 01c6 5A1E     		sub	r2, r3, #1
 351 01c8 374B     		ldr	r3, .L32+12
 352 01ca 1A60     		str	r2, [r3]
 353              	.L23:
 104:../Sources/main.c **** 			
 105:../Sources/main.c **** 			 TFC_SetBatteryLED_Level(t);
 354              		.loc 1 105 0
 355 01cc 364B     		ldr	r3, .L32+12
 356 01ce 1B68     		ldr	r3, [r3]
 357 01d0 DBB2     		uxtb	r3, r3
 358 01d2 181C     		mov	r0, r3
 359 01d4 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 106:../Sources/main.c **** 			
 107:../Sources/main.c **** 			 for(i=0;i<128;i++)
 360              		.loc 1 107 0
 361 01d8 394B     		ldr	r3, .L32+36
 362 01da 0022     		mov	r2, #0
 363 01dc 1A60     		str	r2, [r3]
 364 01de 13E0     		b	.L24
 365              	.L25:
 108:../Sources/main.c **** 			 {
 109:../Sources/main.c **** 					 TERMINAL_PRINTF("%X,",LineScanImage0[i]);
 366              		.loc 1 109 0
 367 01e0 384B     		ldr	r3, .L32+40
 368 01e2 1A68     		ldr	r2, [r3]
 369 01e4 364B     		ldr	r3, .L32+36
 370 01e6 1B68     		ldr	r3, [r3]
 371 01e8 5B00     		lsl	r3, r3, #1
 372 01ea D318     		add	r3, r2, r3
 373 01ec 1B88     		ldrh	r3, [r3]
 374 01ee 9BB2     		uxth	r3, r3
 375 01f0 3049     		ldr	r1, .L32+24
 376 01f2 354A     		ldr	r2, .L32+44
 377 01f4 081C     		mov	r0, r1
 378 01f6 111C     		mov	r1, r2
 379 01f8 1A1C     		mov	r2, r3
 380 01fa FFF7FEFF 		bl	Qprintf
 107:../Sources/main.c **** 			 for(i=0;i<128;i++)
 381              		.loc 1 107 0
 382 01fe 304B     		ldr	r3, .L32+36
 383 0200 1B68     		ldr	r3, [r3]
 384 0202 5A1C     		add	r2, r3, #1
 385 0204 2E4B     		ldr	r3, .L32+36
 386 0206 1A60     		str	r2, [r3]
 387              	.L24:
 107:../Sources/main.c **** 			 for(i=0;i<128;i++)
 388              		.loc 1 107 0 is_stmt 0
 389 0208 2D4B     		ldr	r3, .L32+36
 390 020a 1B68     		ldr	r3, [r3]
 391 020c 7F2B     		cmp	r3, #127
 392 020e E7D9     		bls	.L25
 110:../Sources/main.c **** 			 }
 111:../Sources/main.c **** 			
 112:../Sources/main.c **** 			 for(i=0;i<128;i++)
 393              		.loc 1 112 0 is_stmt 1
 394 0210 2B4B     		ldr	r3, .L32+36
 395 0212 0022     		mov	r2, #0
 396 0214 1A60     		str	r2, [r3]
 397 0216 36E0     		b	.L26
 398              	.L29:
 113:../Sources/main.c **** 			 {
 114:../Sources/main.c **** 					 TERMINAL_PRINTF("%X",LineScanImage1[i]);
 399              		.loc 1 114 0
 400 0218 2C4B     		ldr	r3, .L32+48
 401 021a 1A68     		ldr	r2, [r3]
 402 021c 284B     		ldr	r3, .L32+36
 403 021e 1B68     		ldr	r3, [r3]
 404 0220 5B00     		lsl	r3, r3, #1
 405 0222 D318     		add	r3, r2, r3
 406 0224 1B88     		ldrh	r3, [r3]
 407 0226 9BB2     		uxth	r3, r3
 408 0228 2249     		ldr	r1, .L32+24
 409 022a 294A     		ldr	r2, .L32+52
 410 022c 081C     		mov	r0, r1
 411 022e 111C     		mov	r1, r2
 412 0230 1A1C     		mov	r2, r3
 413 0232 FFF7FEFF 		bl	Qprintf
 115:../Sources/main.c **** 					 if(i==127)
 414              		.loc 1 115 0
 415 0236 224B     		ldr	r3, .L32+36
 416 0238 1B68     		ldr	r3, [r3]
 417 023a 7F2B     		cmp	r3, #127
 418 023c 0FD1     		bne	.L27
 116:../Sources/main.c **** 						 TERMINAL_PRINTF("\r\n",LineScanImage1[i]);
 419              		.loc 1 116 0
 420 023e 234B     		ldr	r3, .L32+48
 421 0240 1A68     		ldr	r2, [r3]
 422 0242 1F4B     		ldr	r3, .L32+36
 423 0244 1B68     		ldr	r3, [r3]
 424 0246 5B00     		lsl	r3, r3, #1
 425 0248 D318     		add	r3, r2, r3
 426 024a 1B88     		ldrh	r3, [r3]
 427 024c 9BB2     		uxth	r3, r3
 428 024e 1949     		ldr	r1, .L32+24
 429 0250 194A     		ldr	r2, .L32+28
 430 0252 081C     		mov	r0, r1
 431 0254 111C     		mov	r1, r2
 432 0256 1A1C     		mov	r2, r3
 433 0258 FFF7FEFF 		bl	Qprintf
 434 025c 0EE0     		b	.L28
 435              	.L27:
 117:../Sources/main.c **** 					 else
 118:../Sources/main.c **** 						 TERMINAL_PRINTF(",",LineScanImage1[i]);
 436              		.loc 1 118 0
 437 025e 1B4B     		ldr	r3, .L32+48
 438 0260 1A68     		ldr	r2, [r3]
 439 0262 174B     		ldr	r3, .L32+36
 440 0264 1B68     		ldr	r3, [r3]
 441 0266 5B00     		lsl	r3, r3, #1
 442 0268 D318     		add	r3, r2, r3
 443 026a 1B88     		ldrh	r3, [r3]
 444 026c 9BB2     		uxth	r3, r3
 445 026e 1149     		ldr	r1, .L32+24
 446 0270 184A     		ldr	r2, .L32+56
 447 0272 081C     		mov	r0, r1
 448 0274 111C     		mov	r1, r2
 449 0276 1A1C     		mov	r2, r3
 450 0278 FFF7FEFF 		bl	Qprintf
 451              	.L28:
 112:../Sources/main.c **** 			 for(i=0;i<128;i++)
 452              		.loc 1 112 0
 453 027c 104B     		ldr	r3, .L32+36
 454 027e 1B68     		ldr	r3, [r3]
 455 0280 5A1C     		add	r2, r3, #1
 456 0282 0F4B     		ldr	r3, .L32+36
 457 0284 1A60     		str	r2, [r3]
 458              	.L26:
 112:../Sources/main.c **** 			 for(i=0;i<128;i++)
 459              		.loc 1 112 0 is_stmt 0
 460 0286 0E4B     		ldr	r3, .L32+36
 461 0288 1B68     		ldr	r3, [r3]
 462 028a 7F2B     		cmp	r3, #127
 463 028c C4D9     		bls	.L29
 119:../Sources/main.c **** 			}										
 120:../Sources/main.c **** 				
 121:../Sources/main.c **** 		}
 122:../Sources/main.c **** 			
 123:../Sources/main.c **** 
 124:../Sources/main.c **** 
 125:../Sources/main.c **** 		break;
 464              		.loc 1 125 0 is_stmt 1
 465 028e 01E0     		b	.L31
 466              	.L30:
  85:../Sources/main.c **** 		break;
 467              		.loc 1 85 0
 468 0290 C046     		mov	r8, r8
 469 0292 00E0     		b	.L1
 470              	.L31:
 471              		.loc 1 125 0
 472 0294 C046     		mov	r8, r8
 473              	.L1:
 126:../Sources/main.c **** 	}   //end of Case
 127:../Sources/main.c **** 	
 128:../Sources/main.c **** }
 474              		.loc 1 128 0
 475 0296 BD46     		mov	sp, r7
 476              		@ sp needed for prologue
 477 0298 98BD     		pop	{r3, r4, r7, pc}
 478              	.L33:
 479 029a C046     		.align	2
 480              	.L32:
 481 029c 80F00F40 		.word	1074786432
 482 02a0 40F00F40 		.word	1074786368
 483 02a4 00000000 		.word	TFC_Ticker
 484 02a8 00000000 		.word	t
 485 02ac 00F10F40 		.word	1074786560
 486 02b0 00000000 		.word	LineScanImageReady
 487 02b4 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 488 02b8 00000000 		.word	.LC4
 489 02bc 04000000 		.word	.LC6
 490 02c0 00000000 		.word	i
 491 02c4 00000000 		.word	LineScanImage0
 492 02c8 08000000 		.word	.LC10
 493 02cc 00000000 		.word	LineScanImage1
 494 02d0 0C000000 		.word	.LC13
 495 02d4 10000000 		.word	.LC15
 496              		.cfi_endproc
 497              	.LFE0:
 499              		.global	__aeabi_i2f
 500              		.global	__aeabi_fadd
 501              		.global	__aeabi_f2d
 502              		.global	__aeabi_ddiv
 503              		.global	__aeabi_dmul
 504              		.global	__aeabi_d2uiz
 505              		.section	.text.exampleEdgeDetect,"ax",%progbits
 506              		.align	2
 507              		.global	exampleEdgeDetect
 508              		.code	16
 509              		.thumb_func
 511              	exampleEdgeDetect:
 512              	.LFB1:
 129:../Sources/main.c **** 
 130:../Sources/main.c **** 
 131:../Sources/main.c **** void exampleEdgeDetect()
 132:../Sources/main.c **** {
 513              		.loc 1 132 0
 514              		.cfi_startproc
 515 0000 98B5     		push	{r3, r4, r7, lr}
 516              	.LCFI2:
 517              		.cfi_def_cfa_offset 16
 518              		.cfi_offset 3, -16
 519              		.cfi_offset 4, -12
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 0002 00AF     		add	r7, sp, #0
 523              	.LCFI3:
 524              		.cfi_def_cfa_register 7
 133:../Sources/main.c **** 	
 134:../Sources/main.c **** 	TFC_SetServo(0,0.0);						//center wheels
 525              		.loc 1 134 0
 526 0004 0023     		mov	r3, #0
 527 0006 0020     		mov	r0, #0
 528 0008 191C     		add	r1, r3, #0
 529 000a FFF7FEFF 		bl	TFC_SetServo
 135:../Sources/main.c **** 	Drive(0.3);	
 530              		.loc 1 135 0
 531 000e A04B     		ldr	r3, .L74+16
 532 0010 181C     		add	r0, r3, #0
 533 0012 FFF7FEFF 		bl	Drive
 136:../Sources/main.c **** 	
 137:../Sources/main.c **** 	if(TFC_Ticker[0]>100 && LineScanImageReady==1)
 534              		.loc 1 137 0
 535 0016 9F4B     		ldr	r3, .L74+20
 536 0018 1B68     		ldr	r3, [r3]
 537 001a 642B     		cmp	r3, #100
 538 001c 00D8     		bhi	.LCB444
 539 001e 27E2     		b	.L35	@long jump
 540              	.LCB444:
 541              		.loc 1 137 0 is_stmt 0
 542 0020 9D4B     		ldr	r3, .L74+24
 543 0022 1B78     		ldrb	r3, [r3]
 544 0024 DBB2     		uxtb	r3, r3
 545 0026 012B     		cmp	r3, #1
 546 0028 00D0     		beq	.LCB449
 547 002a 21E2     		b	.L35	@long jump
 548              	.LCB449:
 138:../Sources/main.c **** 	{
 139:../Sources/main.c **** 		TFC_Ticker[0] = 0;
 549              		.loc 1 139 0 is_stmt 1
 550 002c 994B     		ldr	r3, .L74+20
 551 002e 0022     		mov	r2, #0
 552 0030 1A60     		str	r2, [r3]
 140:../Sources/main.c **** 		LineScanImageReady=0;
 553              		.loc 1 140 0
 554 0032 994B     		ldr	r3, .L74+24
 555 0034 0022     		mov	r2, #0
 556 0036 1A70     		strb	r2, [r3]
 141:../Sources/main.c **** 		
 142:../Sources/main.c **** 		
 143:../Sources/main.c **** 		//  Here is the line scan processing for black line detection Method #2
 144:../Sources/main.c **** 		LSavg = 0;
 557              		.loc 1 144 0
 558 0038 984B     		ldr	r3, .L74+28
 559 003a 0022     		mov	r2, #0
 560 003c 1A80     		strh	r2, [r3]
 145:../Sources/main.c **** 		TmpLSavg = 0.0;
 561              		.loc 1 145 0
 562 003e 984B     		ldr	r3, .L74+32
 563 0040 0022     		mov	r2, #0
 564 0042 1A60     		str	r2, [r3]
 146:../Sources/main.c **** 		
 147:../Sources/main.c **** 		for(i=0;i<128;i++)   //first save the line to the temp file
 565              		.loc 1 147 0
 566 0044 974B     		ldr	r3, .L74+36
 567 0046 0022     		mov	r2, #0
 568 0048 1A60     		str	r2, [r3]
 569 004a 1BE0     		b	.L36
 570              	.L37:
 148:../Sources/main.c **** 		{
 149:../Sources/main.c **** 			LineScanTemp[i] = LineScanImage0[i];
 571              		.loc 1 149 0
 572 004c 954B     		ldr	r3, .L74+36
 573 004e 1A68     		ldr	r2, [r3]
 574 0050 954B     		ldr	r3, .L74+40
 575 0052 1968     		ldr	r1, [r3]
 576 0054 934B     		ldr	r3, .L74+36
 577 0056 1B68     		ldr	r3, [r3]
 578 0058 5B00     		lsl	r3, r3, #1
 579 005a CB18     		add	r3, r1, r3
 580 005c 1B88     		ldrh	r3, [r3]
 581 005e 99B2     		uxth	r1, r3
 582 0060 924B     		ldr	r3, .L74+44
 583 0062 5200     		lsl	r2, r2, #1
 584 0064 D152     		strh	r1, [r2, r3]
 150:../Sources/main.c **** 			LSarray[i] = LineScanTemp[i];
 585              		.loc 1 150 0
 586 0066 8F4B     		ldr	r3, .L74+36
 587 0068 1A68     		ldr	r2, [r3]
 588 006a 8E4B     		ldr	r3, .L74+36
 589 006c 1968     		ldr	r1, [r3]
 590 006e 8F4B     		ldr	r3, .L74+44
 591 0070 4900     		lsl	r1, r1, #1
 592 0072 C95A     		ldrh	r1, [r1, r3]
 593 0074 8E4B     		ldr	r3, .L74+48
 594 0076 5200     		lsl	r2, r2, #1
 595 0078 D152     		strh	r1, [r2, r3]
 147:../Sources/main.c **** 		for(i=0;i<128;i++)   //first save the line to the temp file
 596              		.loc 1 147 0
 597 007a 8A4B     		ldr	r3, .L74+36
 598 007c 1B68     		ldr	r3, [r3]
 599 007e 5A1C     		add	r2, r3, #1
 600 0080 884B     		ldr	r3, .L74+36
 601 0082 1A60     		str	r2, [r3]
 602              	.L36:
 147:../Sources/main.c **** 		for(i=0;i<128;i++)   //first save the line to the temp file
 603              		.loc 1 147 0 is_stmt 0
 604 0084 874B     		ldr	r3, .L74+36
 605 0086 1B68     		ldr	r3, [r3]
 606 0088 7F2B     		cmp	r3, #127
 607 008a DFD9     		bls	.L37
 151:../Sources/main.c **** 		}
 152:../Sources/main.c **** 		for(i=0;i<128;i++)  // Now get the average
 608              		.loc 1 152 0 is_stmt 1
 609 008c 854B     		ldr	r3, .L74+36
 610 008e 0022     		mov	r2, #0
 611 0090 1A60     		str	r2, [r3]
 612 0092 17E0     		b	.L38
 613              	.L39:
 153:../Sources/main.c **** 		{
 154:../Sources/main.c **** 			TmpLSavg += LineScanTemp[i];
 614              		.loc 1 154 0
 615 0094 834B     		ldr	r3, .L74+36
 616 0096 1A68     		ldr	r2, [r3]
 617 0098 844B     		ldr	r3, .L74+44
 618 009a 5200     		lsl	r2, r2, #1
 619 009c D35A     		ldrh	r3, [r2, r3]
 620 009e 181C     		mov	r0, r3
 621 00a0 FFF7FEFF 		bl	__aeabi_i2f
 622 00a4 021C     		add	r2, r0, #0
 623 00a6 7E4B     		ldr	r3, .L74+32
 624 00a8 1B68     		ldr	r3, [r3]
 625 00aa 101C     		add	r0, r2, #0
 626 00ac 191C     		add	r1, r3, #0
 627 00ae FFF7FEFF 		bl	__aeabi_fadd
 628 00b2 031C     		add	r3, r0, #0
 629 00b4 1A1C     		add	r2, r3, #0
 630 00b6 7A4B     		ldr	r3, .L74+32
 631 00b8 1A60     		str	r2, [r3]
 152:../Sources/main.c **** 		for(i=0;i<128;i++)  // Now get the average
 632              		.loc 1 152 0
 633 00ba 7A4B     		ldr	r3, .L74+36
 634 00bc 1B68     		ldr	r3, [r3]
 635 00be 5A1C     		add	r2, r3, #1
 636 00c0 784B     		ldr	r3, .L74+36
 637 00c2 1A60     		str	r2, [r3]
 638              	.L38:
 152:../Sources/main.c **** 		for(i=0;i<128;i++)  // Now get the average
 639              		.loc 1 152 0 is_stmt 0
 640 00c4 774B     		ldr	r3, .L74+36
 641 00c6 1B68     		ldr	r3, [r3]
 642 00c8 7F2B     		cmp	r3, #127
 643 00ca E3D9     		bls	.L39
 155:../Sources/main.c **** 		}
 156:../Sources/main.c **** 		LSavg = (uint16_t) ((TmpLSavg / 128.0)*.8) ;
 644              		.loc 1 156 0 is_stmt 1
 645 00cc 744B     		ldr	r3, .L74+32
 646 00ce 1B68     		ldr	r3, [r3]
 647 00d0 181C     		add	r0, r3, #0
 648 00d2 FFF7FEFF 		bl	__aeabi_f2d
 649 00d6 031C     		mov	r3, r0
 650 00d8 0C1C     		mov	r4, r1
 651 00da 181C     		mov	r0, r3
 652 00dc 211C     		mov	r1, r4
 653 00de 694B     		ldr	r3, .L74+4
 654 00e0 674A     		ldr	r2, .L74
 655 00e2 FFF7FEFF 		bl	__aeabi_ddiv
 656 00e6 031C     		mov	r3, r0
 657 00e8 0C1C     		mov	r4, r1
 658 00ea 181C     		mov	r0, r3
 659 00ec 211C     		mov	r1, r4
 660 00ee 664A     		ldr	r2, .L74+8
 661 00f0 664B     		ldr	r3, .L74+12
 662 00f2 FFF7FEFF 		bl	__aeabi_dmul
 663 00f6 031C     		mov	r3, r0
 664 00f8 0C1C     		mov	r4, r1
 665 00fa 181C     		mov	r0, r3
 666 00fc 211C     		mov	r1, r4
 667 00fe FFF7FEFF 		bl	__aeabi_d2uiz
 668 0102 031C     		mov	r3, r0
 669 0104 9AB2     		uxth	r2, r3
 670 0106 654B     		ldr	r3, .L74+28
 671 0108 1A80     		strh	r2, [r3]
 157:../Sources/main.c **** 		//TERMINAL_PRINTF("Average = %X,", LSavg);					 
 158:../Sources/main.c **** 		for(i=0;i<128;i++)
 672              		.loc 1 158 0
 673 010a 664B     		ldr	r3, .L74+36
 674 010c 0022     		mov	r2, #0
 675 010e 1A60     		str	r2, [r3]
 676 0110 1BE0     		b	.L40
 677              	.L43:
 159:../Sources/main.c **** 		{	 
 160:../Sources/main.c **** 			if (LineScanTemp[i] >= LSavg)   //this turns the line scan into only 2000 or 50 values and shift
 678              		.loc 1 160 0
 679 0112 644B     		ldr	r3, .L74+36
 680 0114 1A68     		ldr	r2, [r3]
 681 0116 654B     		ldr	r3, .L74+44
 682 0118 5200     		lsl	r2, r2, #1
 683 011a D25A     		ldrh	r2, [r2, r3]
 684 011c 5F4B     		ldr	r3, .L74+28
 685 011e 1B88     		ldrh	r3, [r3]
 686 0120 9A42     		cmp	r2, r3
 687 0122 07D3     		bcc	.L41
 161:../Sources/main.c **** 				LSarray[i] = 2000;
 688              		.loc 1 161 0
 689 0124 5F4B     		ldr	r3, .L74+36
 690 0126 1A68     		ldr	r2, [r3]
 691 0128 614B     		ldr	r3, .L74+48
 692 012a 5200     		lsl	r2, r2, #1
 693 012c FA21     		mov	r1, #250
 694 012e C900     		lsl	r1, r1, #3
 695 0130 D152     		strh	r1, [r2, r3]
 696 0132 05E0     		b	.L42
 697              	.L41:
 162:../Sources/main.c **** 			else
 163:../Sources/main.c **** 				LSarray[i] = 50;
 698              		.loc 1 163 0
 699 0134 5B4B     		ldr	r3, .L74+36
 700 0136 1A68     		ldr	r2, [r3]
 701 0138 5D4B     		ldr	r3, .L74+48
 702 013a 5200     		lsl	r2, r2, #1
 703 013c 3221     		mov	r1, #50
 704 013e D152     		strh	r1, [r2, r3]
 705              	.L42:
 158:../Sources/main.c **** 		for(i=0;i<128;i++)
 706              		.loc 1 158 0
 707 0140 584B     		ldr	r3, .L74+36
 708 0142 1B68     		ldr	r3, [r3]
 709 0144 5A1C     		add	r2, r3, #1
 710 0146 574B     		ldr	r3, .L74+36
 711 0148 1A60     		str	r2, [r3]
 712              	.L40:
 158:../Sources/main.c **** 		for(i=0;i<128;i++)
 713              		.loc 1 158 0 is_stmt 0
 714 014a 564B     		ldr	r3, .L74+36
 715 014c 1B68     		ldr	r3, [r3]
 716 014e 7F2B     		cmp	r3, #127
 717 0150 DFD9     		bls	.L43
 164:../Sources/main.c **** 		}	 
 165:../Sources/main.c **** 		
 166:../Sources/main.c **** 		//  Determine edge detection
 167:../Sources/main.c **** 		// Start from middle +/- 20-30 or so and search both ways  Only require a single point dip for li
 168:../Sources/main.c **** 		Ledge = 70 ;  //dont change these with out changing if statements !!!
 718              		.loc 1 168 0 is_stmt 1
 719 0152 584B     		ldr	r3, .L74+52
 720 0154 4622     		mov	r2, #70
 721 0156 1A80     		strh	r2, [r3]
 169:../Sources/main.c **** 		Redge = 56 ;
 722              		.loc 1 169 0
 723 0158 574B     		ldr	r3, .L74+56
 724 015a 3822     		mov	r2, #56
 725 015c 1A80     		strh	r2, [r3]
 170:../Sources/main.c **** 		for (i=84; i > 4 ;i--)
 726              		.loc 1 170 0
 727 015e 514B     		ldr	r3, .L74+36
 728 0160 5422     		mov	r2, #84
 729 0162 1A60     		str	r2, [r3]
 730 0164 1BE0     		b	.L44
 731              	.L47:
 171:../Sources/main.c **** 		{ 
 172:../Sources/main.c **** 			if ((LineScanTemp[i]-LineScanTemp[i-1]) > 400)
 732              		.loc 1 172 0
 733 0166 4F4B     		ldr	r3, .L74+36
 734 0168 1A68     		ldr	r2, [r3]
 735 016a 504B     		ldr	r3, .L74+44
 736 016c 5200     		lsl	r2, r2, #1
 737 016e D35A     		ldrh	r3, [r2, r3]
 738 0170 1A1C     		mov	r2, r3
 739 0172 4C4B     		ldr	r3, .L74+36
 740 0174 1B68     		ldr	r3, [r3]
 741 0176 591E     		sub	r1, r3, #1
 742 0178 4C4B     		ldr	r3, .L74+44
 743 017a 4900     		lsl	r1, r1, #1
 744 017c CB5A     		ldrh	r3, [r1, r3]
 745 017e D21A     		sub	r2, r2, r3
 746 0180 C823     		mov	r3, #200
 747 0182 5B00     		lsl	r3, r3, #1
 748 0184 9A42     		cmp	r2, r3
 749 0186 05DD     		ble	.L45
 173:../Sources/main.c **** 			{
 174:../Sources/main.c **** 				Ledge = i;        // This is the first edge to the left
 750              		.loc 1 174 0
 751 0188 464B     		ldr	r3, .L74+36
 752 018a 1B68     		ldr	r3, [r3]
 753 018c 9AB2     		uxth	r2, r3
 754 018e 494B     		ldr	r3, .L74+52
 755 0190 1A80     		strh	r2, [r3]
 175:../Sources/main.c **** 				break;
 756              		.loc 1 175 0
 757 0192 08E0     		b	.L46
 758              	.L45:
 170:../Sources/main.c **** 		for (i=84; i > 4 ;i--)
 759              		.loc 1 170 0
 760 0194 434B     		ldr	r3, .L74+36
 761 0196 1B68     		ldr	r3, [r3]
 762 0198 5A1E     		sub	r2, r3, #1
 763 019a 424B     		ldr	r3, .L74+36
 764 019c 1A60     		str	r2, [r3]
 765              	.L44:
 170:../Sources/main.c **** 		for (i=84; i > 4 ;i--)
 766              		.loc 1 170 0 is_stmt 0
 767 019e 414B     		ldr	r3, .L74+36
 768 01a0 1B68     		ldr	r3, [r3]
 769 01a2 042B     		cmp	r3, #4
 770 01a4 DFD8     		bhi	.L47
 771              	.L46:
 176:../Sources/main.c **** 			}
 177:../Sources/main.c **** 		
 178:../Sources/main.c **** 		
 179:../Sources/main.c **** 		
 180:../Sources/main.c **** 		}
 181:../Sources/main.c **** 		
 182:../Sources/main.c **** 		GoodLedge = 0;
 772              		.loc 1 182 0 is_stmt 1
 773 01a6 454B     		ldr	r3, .L74+60
 774 01a8 0022     		mov	r2, #0
 775 01aa 1A80     		strh	r2, [r3]
 183:../Sources/main.c **** 		for (i=Ledge; i>=4; i--)
 776              		.loc 1 183 0
 777 01ac 414B     		ldr	r3, .L74+52
 778 01ae 1B88     		ldrh	r3, [r3]
 779 01b0 1A1C     		mov	r2, r3
 780 01b2 3C4B     		ldr	r3, .L74+36
 781 01b4 1A60     		str	r2, [r3]
 782 01b6 1BE0     		b	.L48
 783              	.L51:
 184:../Sources/main.c **** 		{
 185:../Sources/main.c **** 			if ((LSarray[i] == 2000 )&&(LSarray[i-1] == 2000))  //need two points of white
 784              		.loc 1 185 0
 785 01b8 3A4B     		ldr	r3, .L74+36
 786 01ba 1A68     		ldr	r2, [r3]
 787 01bc 3C4B     		ldr	r3, .L74+48
 788 01be 5200     		lsl	r2, r2, #1
 789 01c0 D25A     		ldrh	r2, [r2, r3]
 790 01c2 FA23     		mov	r3, #250
 791 01c4 DB00     		lsl	r3, r3, #3
 792 01c6 9A42     		cmp	r2, r3
 793 01c8 0DD1     		bne	.L49
 794              		.loc 1 185 0 is_stmt 0
 795 01ca 364B     		ldr	r3, .L74+36
 796 01cc 1B68     		ldr	r3, [r3]
 797 01ce 5A1E     		sub	r2, r3, #1
 798 01d0 374B     		ldr	r3, .L74+48
 799 01d2 5200     		lsl	r2, r2, #1
 800 01d4 D25A     		ldrh	r2, [r2, r3]
 801 01d6 FA23     		mov	r3, #250
 802 01d8 DB00     		lsl	r3, r3, #3
 803 01da 9A42     		cmp	r2, r3
 804 01dc 03D1     		bne	.L49
 186:../Sources/main.c **** 			{
 187:../Sources/main.c **** 				GoodLedge = 1;
 805              		.loc 1 187 0 is_stmt 1
 806 01de 374B     		ldr	r3, .L74+60
 807 01e0 0122     		mov	r2, #1
 808 01e2 1A80     		strh	r2, [r3]
 188:../Sources/main.c **** 				break;
 809              		.loc 1 188 0
 810 01e4 08E0     		b	.L50
 811              	.L49:
 183:../Sources/main.c **** 		for (i=Ledge; i>=4; i--)
 812              		.loc 1 183 0
 813 01e6 2F4B     		ldr	r3, .L74+36
 814 01e8 1B68     		ldr	r3, [r3]
 815 01ea 5A1E     		sub	r2, r3, #1
 816 01ec 2D4B     		ldr	r3, .L74+36
 817 01ee 1A60     		str	r2, [r3]
 818              	.L48:
 183:../Sources/main.c **** 		for (i=Ledge; i>=4; i--)
 819              		.loc 1 183 0 is_stmt 0
 820 01f0 2C4B     		ldr	r3, .L74+36
 821 01f2 1B68     		ldr	r3, [r3]
 822 01f4 032B     		cmp	r3, #3
 823 01f6 DFD8     		bhi	.L51
 824              	.L50:
 189:../Sources/main.c **** 			}
 190:../Sources/main.c **** 		}
 191:../Sources/main.c **** 		
 192:../Sources/main.c **** 		//  Now look for the Right edge
 193:../Sources/main.c **** 		
 194:../Sources/main.c **** 		for (i=44;i<124;i++)
 825              		.loc 1 194 0 is_stmt 1
 826 01f8 2A4B     		ldr	r3, .L74+36
 827 01fa 2C22     		mov	r2, #44
 828 01fc 1A60     		str	r2, [r3]
 829 01fe 1BE0     		b	.L52
 830              	.L55:
 195:../Sources/main.c **** 		{
 196:../Sources/main.c **** 			if ((LineScanTemp[i]-LineScanTemp[i+1]) > 400)
 831              		.loc 1 196 0
 832 0200 284B     		ldr	r3, .L74+36
 833 0202 1A68     		ldr	r2, [r3]
 834 0204 294B     		ldr	r3, .L74+44
 835 0206 5200     		lsl	r2, r2, #1
 836 0208 D35A     		ldrh	r3, [r2, r3]
 837 020a 1A1C     		mov	r2, r3
 838 020c 254B     		ldr	r3, .L74+36
 839 020e 1B68     		ldr	r3, [r3]
 840 0210 591C     		add	r1, r3, #1
 841 0212 264B     		ldr	r3, .L74+44
 842 0214 4900     		lsl	r1, r1, #1
 843 0216 CB5A     		ldrh	r3, [r1, r3]
 844 0218 D21A     		sub	r2, r2, r3
 845 021a C823     		mov	r3, #200
 846 021c 5B00     		lsl	r3, r3, #1
 847 021e 9A42     		cmp	r2, r3
 848 0220 05DD     		ble	.L53
 197:../Sources/main.c **** 			{
 198:../Sources/main.c **** 				Redge = i;
 849              		.loc 1 198 0
 850 0222 204B     		ldr	r3, .L74+36
 851 0224 1B68     		ldr	r3, [r3]
 852 0226 9AB2     		uxth	r2, r3
 853 0228 234B     		ldr	r3, .L74+56
 854 022a 1A80     		strh	r2, [r3]
 199:../Sources/main.c **** 				break;
 855              		.loc 1 199 0
 856 022c 08E0     		b	.L54
 857              	.L53:
 194:../Sources/main.c **** 		for (i=44;i<124;i++)
 858              		.loc 1 194 0
 859 022e 1D4B     		ldr	r3, .L74+36
 860 0230 1B68     		ldr	r3, [r3]
 861 0232 5A1C     		add	r2, r3, #1
 862 0234 1B4B     		ldr	r3, .L74+36
 863 0236 1A60     		str	r2, [r3]
 864              	.L52:
 194:../Sources/main.c **** 		for (i=44;i<124;i++)
 865              		.loc 1 194 0 is_stmt 0
 866 0238 1A4B     		ldr	r3, .L74+36
 867 023a 1B68     		ldr	r3, [r3]
 868 023c 7B2B     		cmp	r3, #123
 869 023e DFD9     		bls	.L55
 870              	.L54:
 200:../Sources/main.c **** 			}
 201:../Sources/main.c **** 		}
 202:../Sources/main.c **** 		//  Now check for white space after edge
 203:../Sources/main.c **** 		GoodRedge = 0;
 871              		.loc 1 203 0 is_stmt 1
 872 0240 1F4B     		ldr	r3, .L74+64
 873 0242 0022     		mov	r2, #0
 874 0244 1A80     		strh	r2, [r3]
 204:../Sources/main.c **** 		for (i=Redge;i<124;i++)
 875              		.loc 1 204 0
 876 0246 1C4B     		ldr	r3, .L74+56
 877 0248 1B88     		ldrh	r3, [r3]
 878 024a 1A1C     		mov	r2, r3
 879 024c 154B     		ldr	r3, .L74+36
 880 024e 1A60     		str	r2, [r3]
 881 0250 3DE0     		b	.L56
 882              	.L59:
 205:../Sources/main.c **** 		{
 206:../Sources/main.c **** 			if ((LSarray[i] == 2000 )&&(LSarray[i+1] == 2000))  //need two points of white
 883              		.loc 1 206 0
 884 0252 144B     		ldr	r3, .L74+36
 885 0254 1A68     		ldr	r2, [r3]
 886 0256 164B     		ldr	r3, .L74+48
 887 0258 5200     		lsl	r2, r2, #1
 888 025a D25A     		ldrh	r2, [r2, r3]
 889 025c FA23     		mov	r3, #250
 890 025e DB00     		lsl	r3, r3, #3
 891 0260 9A42     		cmp	r2, r3
 892 0262 2FD1     		bne	.L57
 893              		.loc 1 206 0 is_stmt 0
 894 0264 0F4B     		ldr	r3, .L74+36
 895 0266 1B68     		ldr	r3, [r3]
 896 0268 5A1C     		add	r2, r3, #1
 897 026a 114B     		ldr	r3, .L74+48
 898 026c 5200     		lsl	r2, r2, #1
 899 026e D25A     		ldrh	r2, [r2, r3]
 900 0270 FA23     		mov	r3, #250
 901 0272 DB00     		lsl	r3, r3, #3
 902 0274 9A42     		cmp	r2, r3
 903 0276 25D1     		bne	.L57
 207:../Sources/main.c **** 			{
 208:../Sources/main.c **** 				GoodRedge = 1;
 904              		.loc 1 208 0 is_stmt 1
 905 0278 114B     		ldr	r3, .L74+64
 906 027a 0122     		mov	r2, #1
 907 027c 1A80     		strh	r2, [r3]
 209:../Sources/main.c **** 				break;
 908              		.loc 1 209 0
 909 027e 2AE0     		b	.L58
 910              	.L75:
 911              		.align	3
 912              	.L74:
 913 0280 00000000 		.word	0
 914 0284 00006040 		.word	1080033280
 915 0288 9A999999 		.word	-1717986918
 916 028c 9999E93F 		.word	1072273817
 917 0290 9A99993E 		.word	1050253722
 918 0294 00000000 		.word	TFC_Ticker
 919 0298 00000000 		.word	LineScanImageReady
 920 029c 00000000 		.word	LSavg
 921 02a0 00000000 		.word	TmpLSavg
 922 02a4 00000000 		.word	i
 923 02a8 00000000 		.word	LineScanImage0
 924 02ac 00000000 		.word	LineScanTemp
 925 02b0 00000000 		.word	LSarray
 926 02b4 00000000 		.word	Ledge
 927 02b8 00000000 		.word	Redge
 928 02bc 00000000 		.word	GoodLedge
 929 02c0 00000000 		.word	GoodRedge
 930              	.L57:
 204:../Sources/main.c **** 		for (i=Redge;i<124;i++)
 931              		.loc 1 204 0
 932 02c4 7D4B     		ldr	r3, .L76
 933 02c6 1B68     		ldr	r3, [r3]
 934 02c8 5A1C     		add	r2, r3, #1
 935 02ca 7C4B     		ldr	r3, .L76
 936 02cc 1A60     		str	r2, [r3]
 937              	.L56:
 204:../Sources/main.c **** 		for (i=Redge;i<124;i++)
 938              		.loc 1 204 0 is_stmt 0
 939 02ce 7B4B     		ldr	r3, .L76
 940 02d0 1B68     		ldr	r3, [r3]
 941 02d2 7B2B     		cmp	r3, #123
 942 02d4 BDD9     		bls	.L59
 943              	.L58:
 210:../Sources/main.c **** 			}
 211:../Sources/main.c **** 		}
 212:../Sources/main.c **** 		
 213:../Sources/main.c **** 		
 214:../Sources/main.c **** 		// Now set the 2 edges in LSarray so we can see them
 215:../Sources/main.c **** 		LSarray[Redge] = 3500;
 944              		.loc 1 215 0 is_stmt 1
 945 02d6 7A4B     		ldr	r3, .L76+4
 946 02d8 1B88     		ldrh	r3, [r3]
 947 02da 1A1C     		mov	r2, r3
 948 02dc 794B     		ldr	r3, .L76+8
 949 02de 5200     		lsl	r2, r2, #1
 950 02e0 7949     		ldr	r1, .L76+12
 951 02e2 D152     		strh	r1, [r2, r3]
 216:../Sources/main.c **** 		LSarray[Ledge] = 2500;
 952              		.loc 1 216 0
 953 02e4 794B     		ldr	r3, .L76+16
 954 02e6 1B88     		ldrh	r3, [r3]
 955 02e8 1A1C     		mov	r2, r3
 956 02ea 764B     		ldr	r3, .L76+8
 957 02ec 5200     		lsl	r2, r2, #1
 958 02ee 7849     		ldr	r1, .L76+20
 959 02f0 D152     		strh	r1, [r2, r3]
 217:../Sources/main.c **** 		LSarray[127-GoodRedge] = 400;
 960              		.loc 1 217 0
 961 02f2 784B     		ldr	r3, .L76+24
 962 02f4 1B88     		ldrh	r3, [r3]
 963 02f6 7F22     		mov	r2, #127
 964 02f8 D21A     		sub	r2, r2, r3
 965 02fa 724B     		ldr	r3, .L76+8
 966 02fc 5200     		lsl	r2, r2, #1
 967 02fe C821     		mov	r1, #200
 968 0300 4900     		lsl	r1, r1, #1
 969 0302 D152     		strh	r1, [r2, r3]
 218:../Sources/main.c **** 		LSarray[GoodLedge] = 200;					 
 970              		.loc 1 218 0
 971 0304 744B     		ldr	r3, .L76+28
 972 0306 1B88     		ldrh	r3, [r3]
 973 0308 1A1C     		mov	r2, r3
 974 030a 6E4B     		ldr	r3, .L76+8
 975 030c 5200     		lsl	r2, r2, #1
 976 030e C821     		mov	r1, #200
 977 0310 D152     		strh	r1, [r2, r3]
 219:../Sources/main.c **** 		
 220:../Sources/main.c **** 		//Calculate distance between lines
 221:../Sources/main.c **** 		Delta = Redge-Ledge;
 978              		.loc 1 221 0
 979 0312 6B4B     		ldr	r3, .L76+4
 980 0314 1B88     		ldrh	r3, [r3]
 981 0316 1A1C     		mov	r2, r3
 982 0318 6C4B     		ldr	r3, .L76+16
 983 031a 1B88     		ldrh	r3, [r3]
 984 031c D31A     		sub	r3, r2, r3
 985 031e 1A1C     		mov	r2, r3
 986 0320 6E4B     		ldr	r3, .L76+32
 987 0322 1A60     		str	r2, [r3]
 222:../Sources/main.c **** 		LSarray[Delta] += 150;
 988              		.loc 1 222 0
 989 0324 6D4B     		ldr	r3, .L76+32
 990 0326 1A68     		ldr	r2, [r3]
 991 0328 6C4B     		ldr	r3, .L76+32
 992 032a 1968     		ldr	r1, [r3]
 993 032c 654B     		ldr	r3, .L76+8
 994 032e 4900     		lsl	r1, r1, #1
 995 0330 CB5A     		ldrh	r3, [r1, r3]
 996 0332 9633     		add	r3, r3, #150
 997 0334 99B2     		uxth	r1, r3
 998 0336 634B     		ldr	r3, .L76+8
 999 0338 5200     		lsl	r2, r2, #1
 1000 033a D152     		strh	r1, [r2, r3]
 223:../Sources/main.c **** 		//calculate center
 224:../Sources/main.c **** 		Center = Ledge + ((Redge - Ledge)/2);
 1001              		.loc 1 224 0
 1002 033c 604B     		ldr	r3, .L76+4
 1003 033e 1B88     		ldrh	r3, [r3]
 1004 0340 1A1C     		mov	r2, r3
 1005 0342 624B     		ldr	r3, .L76+16
 1006 0344 1B88     		ldrh	r3, [r3]
 1007 0346 D31A     		sub	r3, r2, r3
 1008 0348 00D5     		bpl	.L60
 1009 034a 0133     		add	r3, r3, #1
 1010              	.L60:
 1011 034c 5B10     		asr	r3, r3, #1
 1012 034e 9AB2     		uxth	r2, r3
 1013 0350 5E4B     		ldr	r3, .L76+16
 1014 0352 1B88     		ldrh	r3, [r3]
 1015 0354 D318     		add	r3, r2, r3
 1016 0356 9AB2     		uxth	r2, r3
 1017 0358 614B     		ldr	r3, .L76+36
 1018 035a 1A80     		strh	r2, [r3]
 225:../Sources/main.c **** 		if (Ledge <= 5)  Center = Redge - 40;
 1019              		.loc 1 225 0
 1020 035c 5B4B     		ldr	r3, .L76+16
 1021 035e 1B88     		ldrh	r3, [r3]
 1022 0360 052B     		cmp	r3, #5
 1023 0362 05D8     		bhi	.L61
 1024              		.loc 1 225 0 is_stmt 0
 1025 0364 564B     		ldr	r3, .L76+4
 1026 0366 1B88     		ldrh	r3, [r3]
 1027 0368 283B     		sub	r3, r3, #40
 1028 036a 9AB2     		uxth	r2, r3
 1029 036c 5C4B     		ldr	r3, .L76+36
 1030 036e 1A80     		strh	r2, [r3]
 1031              	.L61:
 226:../Sources/main.c **** 		if (Redge >=123)  Center = Ledge + 40;
 1032              		.loc 1 226 0 is_stmt 1
 1033 0370 534B     		ldr	r3, .L76+4
 1034 0372 1B88     		ldrh	r3, [r3]
 1035 0374 7A2B     		cmp	r3, #122
 1036 0376 05D9     		bls	.L62
 1037              		.loc 1 226 0 is_stmt 0
 1038 0378 544B     		ldr	r3, .L76+16
 1039 037a 1B88     		ldrh	r3, [r3]
 1040 037c 2833     		add	r3, r3, #40
 1041 037e 9AB2     		uxth	r2, r3
 1042 0380 574B     		ldr	r3, .L76+36
 1043 0382 1A80     		strh	r2, [r3]
 1044              	.L62:
 227:../Sources/main.c **** 		LSarray[Center] = 4000;
 1045              		.loc 1 227 0 is_stmt 1
 1046 0384 564B     		ldr	r3, .L76+36
 1047 0386 1B88     		ldrh	r3, [r3]
 1048 0388 1A1C     		mov	r2, r3
 1049 038a 4E4B     		ldr	r3, .L76+8
 1050 038c 5200     		lsl	r2, r2, #1
 1051 038e FA21     		mov	r1, #250
 1052 0390 0901     		lsl	r1, r1, #4
 1053 0392 D152     		strh	r1, [r2, r3]
 228:../Sources/main.c **** 		
 229:../Sources/main.c **** 		if(t==0)
 1054              		.loc 1 229 0
 1055 0394 534B     		ldr	r3, .L76+40
 1056 0396 1B68     		ldr	r3, [r3]
 1057 0398 002B     		cmp	r3, #0
 1058 039a 03D1     		bne	.L63
 230:../Sources/main.c **** 			t=3;
 1059              		.loc 1 230 0
 1060 039c 514B     		ldr	r3, .L76+40
 1061 039e 0322     		mov	r2, #3
 1062 03a0 1A60     		str	r2, [r3]
 1063 03a2 04E0     		b	.L64
 1064              	.L63:
 231:../Sources/main.c **** 		else
 232:../Sources/main.c **** 			t--;
 1065              		.loc 1 232 0
 1066 03a4 4F4B     		ldr	r3, .L76+40
 1067 03a6 1B68     		ldr	r3, [r3]
 1068 03a8 5A1E     		sub	r2, r3, #1
 1069 03aa 4E4B     		ldr	r3, .L76+40
 1070 03ac 1A60     		str	r2, [r3]
 1071              	.L64:
 233:../Sources/main.c **** 		
 234:../Sources/main.c **** 		 TFC_SetBatteryLED_Level(t);					 
 1072              		.loc 1 234 0
 1073 03ae 4D4B     		ldr	r3, .L76+40
 1074 03b0 1B68     		ldr	r3, [r3]
 1075 03b2 DBB2     		uxtb	r3, r3
 1076 03b4 181C     		mov	r0, r3
 1077 03b6 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 235:../Sources/main.c **** 		 TERMINAL_PRINTF("\r\n");
 1078              		.loc 1 235 0
 1079 03ba 4B4A     		ldr	r2, .L76+44
 1080 03bc 4B4B     		ldr	r3, .L76+48
 1081 03be 101C     		mov	r0, r2
 1082 03c0 191C     		mov	r1, r3
 1083 03c2 FFF7FEFF 		bl	Qprintf
 236:../Sources/main.c **** 		 TERMINAL_PRINTF("L:");						
 1084              		.loc 1 236 0
 1085 03c6 484A     		ldr	r2, .L76+44
 1086 03c8 494B     		ldr	r3, .L76+52
 1087 03ca 101C     		mov	r0, r2
 1088 03cc 191C     		mov	r1, r3
 1089 03ce FFF7FEFF 		bl	Qprintf
 237:../Sources/main.c **** 		 for(i=0;i<128;i++)
 1090              		.loc 1 237 0
 1091 03d2 3A4B     		ldr	r3, .L76
 1092 03d4 0022     		mov	r2, #0
 1093 03d6 1A60     		str	r2, [r3]
 1094 03d8 10E0     		b	.L65
 1095              	.L66:
 238:../Sources/main.c **** 		 {
 239:../Sources/main.c **** 				 TERMINAL_PRINTF("%X,",LineScanTemp[i]);
 1096              		.loc 1 239 0
 1097 03da 384B     		ldr	r3, .L76
 1098 03dc 1A68     		ldr	r2, [r3]
 1099 03de 454B     		ldr	r3, .L76+56
 1100 03e0 5200     		lsl	r2, r2, #1
 1101 03e2 D35A     		ldrh	r3, [r2, r3]
 1102 03e4 4049     		ldr	r1, .L76+44
 1103 03e6 444A     		ldr	r2, .L76+60
 1104 03e8 081C     		mov	r0, r1
 1105 03ea 111C     		mov	r1, r2
 1106 03ec 1A1C     		mov	r2, r3
 1107 03ee FFF7FEFF 		bl	Qprintf
 237:../Sources/main.c **** 		 for(i=0;i<128;i++)
 1108              		.loc 1 237 0
 1109 03f2 324B     		ldr	r3, .L76
 1110 03f4 1B68     		ldr	r3, [r3]
 1111 03f6 5A1C     		add	r2, r3, #1
 1112 03f8 304B     		ldr	r3, .L76
 1113 03fa 1A60     		str	r2, [r3]
 1114              	.L65:
 237:../Sources/main.c **** 		 for(i=0;i<128;i++)
 1115              		.loc 1 237 0 is_stmt 0
 1116 03fc 2F4B     		ldr	r3, .L76
 1117 03fe 1B68     		ldr	r3, [r3]
 1118 0400 7F2B     		cmp	r3, #127
 1119 0402 EAD9     		bls	.L66
 240:../Sources/main.c **** 		 }
 241:../Sources/main.c **** 		
 242:../Sources/main.c **** 		 for(i=0;i<128;i++)
 1120              		.loc 1 242 0 is_stmt 1
 1121 0404 2D4B     		ldr	r3, .L76
 1122 0406 0022     		mov	r2, #0
 1123 0408 1A60     		str	r2, [r3]
 1124 040a 2DE0     		b	.L67
 1125              	.L70:
 243:../Sources/main.c **** 		 {
 244:../Sources/main.c **** 				 TERMINAL_PRINTF("%X",LSarray[i]);
 1126              		.loc 1 244 0
 1127 040c 2B4B     		ldr	r3, .L76
 1128 040e 1A68     		ldr	r2, [r3]
 1129 0410 2C4B     		ldr	r3, .L76+8
 1130 0412 5200     		lsl	r2, r2, #1
 1131 0414 D35A     		ldrh	r3, [r2, r3]
 1132 0416 3449     		ldr	r1, .L76+44
 1133 0418 384A     		ldr	r2, .L76+64
 1134 041a 081C     		mov	r0, r1
 1135 041c 111C     		mov	r1, r2
 1136 041e 1A1C     		mov	r2, r3
 1137 0420 FFF7FEFF 		bl	Qprintf
 245:../Sources/main.c **** 				 if(i==127)
 1138              		.loc 1 245 0
 1139 0424 254B     		ldr	r3, .L76
 1140 0426 1B68     		ldr	r3, [r3]
 1141 0428 7F2B     		cmp	r3, #127
 1142 042a 0CD1     		bne	.L68
 246:../Sources/main.c **** 					 TERMINAL_PRINTF("\r\n",LSarray[i]);
 1143              		.loc 1 246 0
 1144 042c 234B     		ldr	r3, .L76
 1145 042e 1A68     		ldr	r2, [r3]
 1146 0430 244B     		ldr	r3, .L76+8
 1147 0432 5200     		lsl	r2, r2, #1
 1148 0434 D35A     		ldrh	r3, [r2, r3]
 1149 0436 2C49     		ldr	r1, .L76+44
 1150 0438 2C4A     		ldr	r2, .L76+48
 1151 043a 081C     		mov	r0, r1
 1152 043c 111C     		mov	r1, r2
 1153 043e 1A1C     		mov	r2, r3
 1154 0440 FFF7FEFF 		bl	Qprintf
 1155 0444 0BE0     		b	.L69
 1156              	.L68:
 247:../Sources/main.c **** 				 else
 248:../Sources/main.c **** 					 TERMINAL_PRINTF(",",LSarray[i]);
 1157              		.loc 1 248 0
 1158 0446 1D4B     		ldr	r3, .L76
 1159 0448 1A68     		ldr	r2, [r3]
 1160 044a 1E4B     		ldr	r3, .L76+8
 1161 044c 5200     		lsl	r2, r2, #1
 1162 044e D35A     		ldrh	r3, [r2, r3]
 1163 0450 2549     		ldr	r1, .L76+44
 1164 0452 2B4A     		ldr	r2, .L76+68
 1165 0454 081C     		mov	r0, r1
 1166 0456 111C     		mov	r1, r2
 1167 0458 1A1C     		mov	r2, r3
 1168 045a FFF7FEFF 		bl	Qprintf
 1169              	.L69:
 242:../Sources/main.c **** 		 for(i=0;i<128;i++)
 1170              		.loc 1 242 0
 1171 045e 174B     		ldr	r3, .L76
 1172 0460 1B68     		ldr	r3, [r3]
 1173 0462 5A1C     		add	r2, r3, #1
 1174 0464 154B     		ldr	r3, .L76
 1175 0466 1A60     		str	r2, [r3]
 1176              	.L67:
 242:../Sources/main.c **** 		 for(i=0;i<128;i++)
 1177              		.loc 1 242 0 is_stmt 0
 1178 0468 144B     		ldr	r3, .L76
 1179 046a 1B68     		ldr	r3, [r3]
 1180 046c 7F2B     		cmp	r3, #127
 1181 046e CDD9     		bls	.L70
 1182              	.L35:
 249:../Sources/main.c **** 		}										
 250:../Sources/main.c **** 			
 251:../Sources/main.c **** 	}
 252:../Sources/main.c **** 		
 253:../Sources/main.c **** 	//now make adjustment in steering
 254:../Sources/main.c **** 	if((Center >= 60) && (Center <= 68)) {
 1183              		.loc 1 254 0 is_stmt 1
 1184 0470 1B4B     		ldr	r3, .L76+36
 1185 0472 1B88     		ldrh	r3, [r3]
 1186 0474 3B2B     		cmp	r3, #59
 1187 0476 09D9     		bls	.L71
 1188              		.loc 1 254 0 is_stmt 0
 1189 0478 194B     		ldr	r3, .L76+36
 1190 047a 1B88     		ldrh	r3, [r3]
 1191 047c 442B     		cmp	r3, #68
 1192 047e 05D8     		bhi	.L71
 255:../Sources/main.c **** 		TFC_SetServo(0,0.0);						//center wheels
 1193              		.loc 1 255 0 is_stmt 1
 1194 0480 0023     		mov	r3, #0
 1195 0482 0020     		mov	r0, #0
 1196 0484 191C     		add	r1, r3, #0
 1197 0486 FFF7FEFF 		bl	TFC_SetServo
 1198 048a 14E0     		b	.L34
 1199              	.L71:
 256:../Sources/main.c **** 	}
 257:../Sources/main.c **** 	else if (Center <62 ){
 1200              		.loc 1 257 0
 1201 048c 144B     		ldr	r3, .L76+36
 1202 048e 1B88     		ldrh	r3, [r3]
 1203 0490 3D2B     		cmp	r3, #61
 1204 0492 06D8     		bhi	.L73
 258:../Sources/main.c **** 		TFC_SetServo(0,-.5);						//turn left
 1205              		.loc 1 258 0
 1206 0494 BF23     		mov	r3, #191
 1207 0496 1B06     		lsl	r3, r3, #24
 1208 0498 0020     		mov	r0, #0
 1209 049a 191C     		add	r1, r3, #0
 1210 049c FFF7FEFF 		bl	TFC_SetServo
 1211 04a0 09E0     		b	.L34
 1212              	.L73:
 259:../Sources/main.c **** 	}
 260:../Sources/main.c **** 	else if (Center >66 ){
 1213              		.loc 1 260 0
 1214 04a2 0F4B     		ldr	r3, .L76+36
 1215 04a4 1B88     		ldrh	r3, [r3]
 1216 04a6 422B     		cmp	r3, #66
 1217 04a8 05D9     		bls	.L34
 261:../Sources/main.c **** 		TFC_SetServo(0,+.5);						//turn right
 1218              		.loc 1 261 0
 1219 04aa FC23     		mov	r3, #252
 1220 04ac 9B05     		lsl	r3, r3, #22
 1221 04ae 0020     		mov	r0, #0
 1222 04b0 191C     		add	r1, r3, #0
 1223 04b2 FFF7FEFF 		bl	TFC_SetServo
 1224              	.L34:
 262:../Sources/main.c **** 	}
 263:../Sources/main.c **** }
 1225              		.loc 1 263 0
 1226 04b6 BD46     		mov	sp, r7
 1227              		@ sp needed for prologue
 1228 04b8 98BD     		pop	{r3, r4, r7, pc}
 1229              	.L77:
 1230 04ba C046     		.align	2
 1231              	.L76:
 1232 04bc 00000000 		.word	i
 1233 04c0 00000000 		.word	Redge
 1234 04c4 00000000 		.word	LSarray
 1235 04c8 AC0D0000 		.word	3500
 1236 04cc 00000000 		.word	Ledge
 1237 04d0 C4090000 		.word	2500
 1238 04d4 00000000 		.word	GoodRedge
 1239 04d8 00000000 		.word	GoodLedge
 1240 04dc 00000000 		.word	Delta
 1241 04e0 00000000 		.word	Center
 1242 04e4 00000000 		.word	t
 1243 04e8 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 1244 04ec 00000000 		.word	.LC4
 1245 04f0 04000000 		.word	.LC6
 1246 04f4 00000000 		.word	LineScanTemp
 1247 04f8 08000000 		.word	.LC10
 1248 04fc 0C000000 		.word	.LC13
 1249 0500 10000000 		.word	.LC15
 1250              		.cfi_endproc
 1251              	.LFE1:
 1253 0504 C046C046 		.section	.text.main,"ax",%progbits
 1254              		.align	2
 1255              		.global	main
 1256              		.code	16
 1257              		.thumb_func
 1259              	main:
 1260              	.LFB2:
 264:../Sources/main.c **** 
 265:../Sources/main.c **** int main(void)
 266:../Sources/main.c **** {
 1261              		.loc 1 266 0
 1262              		.cfi_startproc
 1263 0000 80B5     		push	{r7, lr}
 1264              	.LCFI4:
 1265              		.cfi_def_cfa_offset 8
 1266              		.cfi_offset 7, -8
 1267              		.cfi_offset 14, -4
 1268 0002 00AF     		add	r7, sp, #0
 1269              	.LCFI5:
 1270              		.cfi_def_cfa_register 7
 267:../Sources/main.c **** 	TFC_Init();
 1271              		.loc 1 267 0
 1272 0004 FFF7FEFF 		bl	TFC_Init
 268:../Sources/main.c **** 	t = 0;
 1273              		.loc 1 268 0
 1274 0008 224B     		ldr	r3, .L92
 1275 000a 0022     		mov	r2, #0
 1276 000c 1A60     		str	r2, [r3]
 269:../Sources/main.c **** 	i = 0;
 1277              		.loc 1 269 0
 1278 000e 224B     		ldr	r3, .L92+4
 1279 0010 0022     		mov	r2, #0
 1280 0012 1A60     		str	r2, [r3]
 270:../Sources/main.c **** 	TFC_Ticker[3] = 0;
 1281              		.loc 1 270 0
 1282 0014 214B     		ldr	r3, .L92+8
 1283 0016 0022     		mov	r2, #0
 1284 0018 DA60     		str	r2, [r3, #12]
 271:../Sources/main.c **** 	while (!(TFC_PUSH_BUTTON_0_PRESSED))
 1285              		.loc 1 271 0
 1286 001a 1DE0     		b	.L79
 1287              	.L88:
 272:../Sources/main.c **** 	{ 	
 273:../Sources/main.c **** 		while (TFC_Ticker[3]<1000) continue;
 1288              		.loc 1 273 0
 1289 001c C046     		mov	r8, r8
 1290 001e 00E0     		b	.L80
 1291              	.L90:
 1292 0020 C046     		mov	r8, r8
 1293              	.L80:
 1294              		.loc 1 273 0 is_stmt 0
 1295 0022 1E4B     		ldr	r3, .L92+8
 1296 0024 DA68     		ldr	r2, [r3, #12]
 1297 0026 1E4B     		ldr	r3, .L92+12
 1298 0028 9A42     		cmp	r2, r3
 1299 002a F7D9     		bls	.L88
 274:../Sources/main.c **** 		TFC_Ticker[3] = 0;
 1300              		.loc 1 274 0 is_stmt 1
 1301 002c 1B4B     		ldr	r3, .L92+8
 1302 002e 0022     		mov	r2, #0
 1303 0030 DA60     		str	r2, [r3, #12]
 275:../Sources/main.c **** 		TFC_BAT_LED0_ON;
 1304              		.loc 1 275 0
 1305 0032 1C4B     		ldr	r3, .L92+16
 1306 0034 8022     		mov	r2, #128
 1307 0036 5200     		lsl	r2, r2, #1
 1308 0038 5A60     		str	r2, [r3, #4]
 276:../Sources/main.c **** 		while (TFC_Ticker[3]<1000) continue;
 1309              		.loc 1 276 0
 1310 003a C046     		mov	r8, r8
 1311 003c 00E0     		b	.L82
 1312              	.L89:
 1313 003e C046     		mov	r8, r8
 1314              	.L82:
 1315              		.loc 1 276 0 is_stmt 0
 1316 0040 164B     		ldr	r3, .L92+8
 1317 0042 DA68     		ldr	r2, [r3, #12]
 1318 0044 164B     		ldr	r3, .L92+12
 1319 0046 9A42     		cmp	r2, r3
 1320 0048 F9D9     		bls	.L89
 277:../Sources/main.c **** 		TFC_Ticker[3] = 0;
 1321              		.loc 1 277 0 is_stmt 1
 1322 004a 144B     		ldr	r3, .L92+8
 1323 004c 0022     		mov	r2, #0
 1324 004e DA60     		str	r2, [r3, #12]
 278:../Sources/main.c **** 		TFC_BAT_LED0_OFF;
 1325              		.loc 1 278 0
 1326 0050 144B     		ldr	r3, .L92+16
 1327 0052 8022     		mov	r2, #128
 1328 0054 5200     		lsl	r2, r2, #1
 1329 0056 9A60     		str	r2, [r3, #8]
 1330              	.L79:
 271:../Sources/main.c **** 	while (!(TFC_PUSH_BUTTON_0_PRESSED))
 1331              		.loc 1 271 0
 1332 0058 134B     		ldr	r3, .L92+20
 1333 005a 1A69     		ldr	r2, [r3, #16]
 1334 005c 8023     		mov	r3, #128
 1335 005e 9B01     		lsl	r3, r3, #6
 1336 0060 1340     		and	r3, r2
 1337 0062 DDD0     		beq	.L90
 279:../Sources/main.c **** 	}
 280:../Sources/main.c **** 	TFC_Ticker[3] = 0;
 1338              		.loc 1 280 0
 1339 0064 0D4B     		ldr	r3, .L92+8
 1340 0066 0022     		mov	r2, #0
 1341 0068 DA60     		str	r2, [r3, #12]
 281:../Sources/main.c **** 	while (TFC_Ticker[3]<2000) continue;		//wait 2 seconds p button push
 1342              		.loc 1 281 0
 1343 006a C046     		mov	r8, r8
 1344 006c 00E0     		b	.L85
 1345              	.L91:
 1346 006e C046     		mov	r8, r8
 1347              	.L85:
 1348              		.loc 1 281 0 is_stmt 0
 1349 0070 0A4B     		ldr	r3, .L92+8
 1350 0072 DA68     		ldr	r2, [r3, #12]
 1351 0074 0D4B     		ldr	r3, .L92+24
 1352 0076 9A42     		cmp	r2, r3
 1353 0078 F9D9     		bls	.L91
 1354              	.L87:
 282:../Sources/main.c **** 	
 283:../Sources/main.c **** 	for(;;)
 284:../Sources/main.c **** 	{
 285:../Sources/main.c **** 		TFC_Task();
 1355              		.loc 1 285 0 is_stmt 1
 1356 007a FFF7FEFF 		bl	TFC_Task
 286:../Sources/main.c **** //		exampleEdgeDetect();
 287:../Sources/main.c **** //		demo();
 288:../Sources/main.c **** 		printLineScanData(t, i);
 1357              		.loc 1 288 0
 1358 007e 054B     		ldr	r3, .L92
 1359 0080 1B68     		ldr	r3, [r3]
 1360 0082 1A1C     		mov	r2, r3
 1361 0084 044B     		ldr	r3, .L92+4
 1362 0086 1B68     		ldr	r3, [r3]
 1363 0088 101C     		mov	r0, r2
 1364 008a 191C     		mov	r1, r3
 1365 008c FFF7FEFF 		bl	printLineScanData
 289:../Sources/main.c **** //		Steer(LEFT, 0.5);
 290:../Sources/main.c **** //		TFC_Delay_mS(1000);
 291:../Sources/main.c **** //		Steer(CENTER, 0);
 292:../Sources/main.c **** //		TFC_Delay_mS(1000);
 293:../Sources/main.c **** //		Steer(RIGHT, 0.5);
 294:../Sources/main.c **** //		TFC_Delay_mS(1000);
 295:../Sources/main.c **** //		Steer(CENTER, 0);
 296:../Sources/main.c **** //		TFC_Delay_mS(1000);
 297:../Sources/main.c **** 	}
 1366              		.loc 1 297 0
 1367 0090 F3E7     		b	.L87
 1368              	.L93:
 1369 0092 C046     		.align	2
 1370              	.L92:
 1371 0094 00000000 		.word	t
 1372 0098 00000000 		.word	i
 1373 009c 00000000 		.word	TFC_Ticker
 1374 00a0 E7030000 		.word	999
 1375 00a4 40F00F40 		.word	1074786368
 1376 00a8 80F00F40 		.word	1074786432
 1377 00ac CF070000 		.word	1999
 1378              		.cfi_endproc
 1379              	.LFE2:
 1381              		.text
 1382              	.Letext0:
 1383              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 1384              		.file 3 "C:/Users/Josh/workspace/FRDM-TFC/Project_Headers/MKL25Z4.h"
 1385              		.file 4 "C:/Users/Josh/workspace/FRDM-TFC/Project_Headers/TFC\\TFC_Queue.h"
 1386              		.file 5 "C:/Users/Josh/workspace/FRDM-TFC/Project_Headers/TFC\\TFC_ARM_SysTick.h"
 1387              		.file 6 "C:/Users/Josh/workspace/FRDM-TFC/Project_Headers/TFC\\TFC_LineScanCamera.h"
 1388              		.file 7 "C:/Users/Josh/workspace/FRDM-TFC/Project_Headers/TFC\\TFC_UART.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000004 t
                            *COM*:00000004 Delta
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:24     .bss.i:00000000 i
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:21     .bss.i:00000000 $d
                            *COM*:00000100 LineScanTemp
                            *COM*:00000100 LSarray
                            *COM*:00000002 LSavg
                            *COM*:00000002 Ledge
                            *COM*:00000002 Redge
                            *COM*:00000002 Center
                            *COM*:00000002 GoodRedge
                            *COM*:00000002 GoodLedge
                            *COM*:00000004 TmpLSavg
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:36     .rodata:00000000 $d
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:52     .text.demo:00000000 $t
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:57     .text.demo:00000000 demo
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:481    .text.demo:0000029c $d
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:506    .text.exampleEdgeDetect:00000000 $t
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:511    .text.exampleEdgeDetect:00000000 exampleEdgeDetect
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:913    .text.exampleEdgeDetect:00000280 $d
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:932    .text.exampleEdgeDetect:000002c4 $t
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:1232   .text.exampleEdgeDetect:000004bc $d
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:1254   .text.main:00000000 $t
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:1259   .text.main:00000000 main
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:1371   .text.main:00000094 $d
                     .debug_frame:00000010 $d
C:\Users\Josh\AppData\Local\Temp\ccpyMl8h.s:1253   .text.exampleEdgeDetect:00000504 $t

UNDEFINED SYMBOLS
TFC_GetDIP_Switch
TFC_ReadPot
TFC_SetServo
TFC_SetBatteryLED_Level
TFC_SetMotorPWM
Qprintf
TFC_Ticker
LineScanImageReady
SDA_SERIAL_OUTGOING_QUEUE
LineScanImage0
LineScanImage1
__aeabi_i2f
__aeabi_fadd
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2uiz
Drive
TFC_Init
TFC_Task
printLineScanData
